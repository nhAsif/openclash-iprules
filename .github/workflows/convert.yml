# .github/workflows/convert-ip-ranges.yml
name: Convert IP Ranges to OpenClash Format

on:
  schedule:
    # Run every 12 hours (at 00:00 and 12:00 UTC)
    - cron: '0 0,12 * * *'
  
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: 'false'
        type: boolean

jobs:
  convert-ip-ranges:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests pyyaml

      - name: Clone repositories
        run: |
          # Clone main ipranges repository
          git clone https://github.com/lord-alfred/ipranges.git temp-ipranges
          
          # Clone YouTube IP list repository
          git clone https://github.com/touhidurrr/iplist-youtube.git temp-youtube
          
          # Clone IP-Prefix-List repository
          git clone https://github.com/sakib-m/IP-Prefix-List.git temp-ip-prefix-list

      - name: Create conversion script
        run: |
          python - <<'PY'
          from textwrap import dedent
          code = dedent('''
          import os
          import re
          import requests
          import yaml
          from pathlib import Path
          import json
          from datetime import datetime

          # Define repositories to process
          REPOSITORIES = [
              {
                  'name': 'ipranges',
                  'source_dir': 'temp-ipranges',
                  'prefix': 'ipranges',
                  'output_dir': 'ipranges'
              },
              {
                  'name': 'youtube',
                  'source_dir': 'temp-youtube/lists',
                  'prefix': 'youtube',
                  'output_dir': 'youtube'
              },
              {
                  'name': 'ip-prefix-list',
                  'source_dir': 'temp-ip-prefix-list',
                  'prefix': 'ip-prefix-list',
                  'output_dir': 'ip-prefix-list'
              }
          ]

          def fetch_file_list():
              all_files = []
              
              for repo in REPOSITORIES:
                  temp_dir = Path(repo['source_dir'])
                  
                  if not temp_dir.exists():
                      print(f"Warning: {repo['source_dir']} directory not found")
                      continue
                  
                  txt_files = []
                  # Look for .txt files and also .rsc files for RouterOS
                  for file_path in temp_dir.rglob("*"):
                      if (file_path.suffix.lower() in ['.txt', '.rsc'] and 
                          not file_path.name.lower().startswith('readme')):
                          txt_files.append({
                              'name': file_path.name,
                              'local_path': file_path,
                              'relative_path': file_path.relative_to(temp_dir),
                              'repo_name': repo['name'],
                              'repo_prefix': repo['prefix'],
                              'output_dir': repo['output_dir']
                          })
                  
                  print(f"Found {len(txt_files)} .txt files in {repo['name']}")
                  for file_info in txt_files:
                      print(f"  - {file_info['relative_path']}")
                  
                  all_files.extend(txt_files)
              
              return all_files

          def download_and_convert(file_info, output_dir):
              file_name = file_info['name']
              local_path = file_info['local_path']
              relative_path = file_info['relative_path']
              
              print(f"Processing {relative_path}...")
              
              try:
                  with open(local_path, 'r', encoding='utf-8') as f:
                      content = f.read().strip()
                  
                  if not content:
                      print(f"  Skipping {relative_path} (empty file)")
                      return False
                  
                  ip_ranges = []
                  total_lines = 0
                  
                  for line in content.split('\n'):
                      line = line.strip()
                      total_lines += 1
                      
                      if line and not line.startswith('#'):
                          # Check for IPv4 CIDR format
                          if re.match(r'^(\d{1,3}\.){3}\d{1,3}(/\d{1,2})?$', line):
                              if '/' not in line:
                                  line += '/32'
                              ip_ranges.append(line)
                          # Check for IPv6 CIDR format
                          elif re.match(r'^[0-9a-fA-F:]+(/\d{1,3})?$', line):
                              if '/' not in line:
                                  line += '/128'
                              ip_ranges.append(line)
                          else:
                              if re.match(r'^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', line):
                                  continue
                  
                  if not ip_ranges:
                      print(f"  Skipping {relative_path} (no valid IP ranges found from {total_lines} lines)")
                      return False
                  
                  # Create repository-specific output directory
                  repo_output_dir = output_dir / file_info['output_dir']
                  repo_output_dir.mkdir(parents=True, exist_ok=True)
                  
                  # Generate filename without repository prefix since we have separate folders
                  base_name = str(relative_path).replace('.txt', '').replace('/', '-').replace('\\', '-')
                  output_filename = f"{base_name}.yaml"
                  output_file = repo_output_dir / output_filename
                  
                  with open(output_file, 'w', encoding='utf-8') as f:
                      f.write("payload:\n")
                      for ip_range in ip_ranges:
                          f.write(f"  - {ip_range}\n")
                  
                  print(f"  ✓ Converted {relative_path} -> {output_file.name} ({len(ip_ranges)} rules from {total_lines} lines)")
                  return True
                  
              except Exception as e:
                  print(f"  ✗ Error processing {relative_path}: {e}")
                  return False

          def main():
              output_dir = Path("openclash-rules")
              output_dir.mkdir(exist_ok=True)
              
              # Create repository-specific directories
              for repo in REPOSITORIES:
                  repo_dir = output_dir / repo['output_dir']
                  repo_dir.mkdir(exist_ok=True)
              
              readme_content = """# OpenClash Compatible IP Range Rules

          This directory contains IP range rules converted from multiple repositories to OpenClash-compatible YAML format.

          ## Sources

          - [ipranges repository](https://github.com/lord-alfred/ipranges) - Various service IP ranges
          - [YouTube IP list](https://github.com/touhidurrr/iplist-youtube) - YouTube IP ranges (IPv4, IPv6, CIDR)
          - [IP-Prefix-List](https://github.com/sakib-m/IP-Prefix-List) - IP prefixes for many companies

          ## Usage

          Add these rule providers to your OpenClash configuration:

          ```yaml
          rule-providers:
            # Example for Facebook IPs (from ipranges repository)
            facebook-ip:
              type: http
              behavior: ipcidr
              url: "https://raw.githubusercontent.com/YOUR-USERNAME/YOUR-REPO/main/openclash-rules/ipranges/facebook-ipv4.yaml"
              path: ./ruleset/facebook-ip.yaml
              interval: 86400  # 24 hours
            
            # Example for YouTube IPv4 (from YouTube repository)
            youtube-ipv4:
              type: http
              behavior: ipcidr
              url: "https://raw.githubusercontent.com/YOUR-USERNAME/YOUR-REPO/main/openclash-rules/youtube/ipv4.yaml"
              path: ./ruleset/youtube-ipv4.yaml
              interval: 86400  # 24 hours
            
            # Example for YouTube IPv6 (from YouTube repository)
            youtube-ipv6:
              type: http
              behavior: ipcidr
              url: "https://raw.githubusercontent.com/YOUR-USERNAME/YOUR-REPO/main/openclash-rules/youtube/ipv6.yaml"
              path: ./ruleset/youtube-ipv6.yaml
              interval: 86400  # 24 hours
          ```

          Then use in rules:
          ```yaml
          rules:
            - RULE-SET,facebook-ip,DIRECT
            - RULE-SET,youtube-ipv4,DIRECT
            - RULE-SET,youtube-ipv6,DIRECT
          ```

          ## Files

          """
              
              files = fetch_file_list()
              converted_count = 0
              file_info = []
              
              for file_info_item in files:
                  if download_and_convert(file_info_item, output_dir):
                      converted_count += 1
                      base_name = str(file_info_item['relative_path']).replace('.txt', '').replace('/', '-').replace('\\', '-')
                      service_name = file_info_item['relative_path'].parent.name if file_info_item['relative_path'].parent.name != '.' else 'root'
                      output_filename = f"{base_name}.yaml"
                      file_info.append(f"- `{file_info_item['output_dir']}/{output_filename}` - {file_info_item['repo_name'].upper()} {service_name.upper()} {file_info_item['name'].replace('.txt', '')} IP ranges")
              
              readme_content += '\n'.join(file_info)
              readme_content += f"\n\n*Last updated: {datetime.utcnow().isoformat()}Z*\n"
              readme_content += f"*Total files converted: {converted_count}*\n"
              
              with open(output_dir / "README.md", 'w') as f:
                  f.write(readme_content)
              
              print(f"\nConversion complete! {converted_count} files processed.")
              
              with open("conversion_summary.txt", 'w') as f:
                  f.write(f"Converted {converted_count} IP range files to OpenClash format")
              
              import shutil
              # Cleanup all temporary directories
              for temp_dir in ["temp-ipranges", "temp-youtube", "temp-ip-prefix-list"]:
                  if Path(temp_dir).exists():
                      shutil.rmtree(temp_dir)

          if __name__ == "__main__":
              main()
          ''')
          with open('convert_ranges.py','w', encoding='utf-8') as f:
              f.write(code)
          PY

      - name: Run conversion script
        run: python convert_ranges.py

      - name: Check for changes
        id: check_git_changes
        run: |
          if git diff --quiet HEAD -- openclash-rules/; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check_git_changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add openclash-rules/
          
          SUMMARY=$(cat conversion_summary.txt)
          
          git commit -m "🤖 Auto-update OpenClash IP ranges

          $SUMMARY
          
          Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Sources: https://github.com/lord-alfred/ipranges, https://github.com/touhidurrr/iplist-youtube" || exit 0
          
          git push origin HEAD:${{ github.ref }}

      - name: Create release summary
        if: steps.check_git_changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          echo "## 📋 Conversion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat conversion_summary.txt >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Rules |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|-------|" >> $GITHUB_STEP_SUMMARY
          
          for file in openclash-rules/*.yaml; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              rules=$(grep -c "IP-CIDR" "$file" || echo "0")
              echo "| $filename | $size | $rules |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: No changes detected
        if: steps.check_git_changes.outputs.has_changes == 'false' && github.event.inputs.force_update != 'true'
        run: |
          echo "## ℹ️ No Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No updates were needed for the IP range files." >> $GITHUB_STEP_SUMMARY 
